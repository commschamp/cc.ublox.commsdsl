cmake_minimum_required (VERSION 3.10)
project ("cc.ublox.commsdsl")

option (UBLOX_NO_WARN_AS_ERR "Don't treat compilation warnings as errors." OFF)
option (UBLOX_USE_CCACHE "Use ccache." OFF)
option (UBLOX_GEN_PROTOCOL "Use commsdsl2comms to generate protocol definition" ON)
option (UBLOX_BUILD_PROTOCOL "Build and install protocol definition generated by the commsdsl2comms" ${UBLOX_GEN_PROTOCOL})
option (UBLOX_BUILD_PROT_DOC "Build documentation for generated protocol" OFF)
option (UBLOX_GEN_TEST "Use commsdsl2test to generate test project." OFF)
option (UBLOX_BUILD_TEST "Build and install project generated by the commsdsl2test." ${UBLOX_GEN_TEST})
option (UBLOX_GEN_TOOLS "Use commsdsl2tools_qt to generate cc_tools_qt plugin project." OFF)
option (UBLOX_BUILD_TOOLS "Build and install project generated by the commsdsl2tools_qt." ${UBLOX_GEN_TOOLS})
option (UBLOX_GEN_SWIG "Use commsdsl2swig to generate swig bindings project." OFF)
option (UBLOX_BUILD_SWIG "Build and install project generated by the commsdsl2swig." ${UBLOX_GEN_SWIG})
option (UBLOX_GEN_EMSCRIPTEN "Use commsdsl2emscripten to generate emscripten bindings project." OFF)
option (UBLOX_BUILD_EMSCRIPTEN "Build and install project generated by the commsdsl2emscripten." ${UBLOX_GEN_EMSCRIPTEN})
option (UBLOX_BUILD_EXAMPLES "Build examples." OFF)

# Additional variables to be used if needed
# ---------------------------
# UBLOX_PROT_OUTPUT_DIR - Path to protocol output directory. If not provided <build_dir>/output one is used.
# UBLOX_TEST_OUTPUT_DIR - Path to test output directory. If not provided <build_dir>/output_tools one is used.
# UBLOX_TOOLS_OUTPUT_DIR - Path to tools output directory. If not provided <build_dir>/output_tools one is used.
# UBLOX_TOOLS_QT_VER - Major Qt version to be used when building tools output. Defaults to 5
# UBLOX_SWIG_OUTPUT_DIR - Path to swig output directory. If not provided <build_dir>/output_swig one is used.
# UBLOX_SWIG_SRC_DIR - Path to the commsdsl2swig sources. If not provided local "src/swig" dir is used.
# UBLOX_SCHEMA_FILES_LIST_FILE - Path to the file containing list of DSL files, use it to replace "schema_files" list below.
# UBLOX_EMSCRIPTEN_OUTPUT_DIR - Path to emscripten output directory. If not provided <build_dir>/output_emscripten one is used.
# UBLOX_CCACHE_EXECUTABLE - Custom ccache executable
# COMMSDSL2COMMS_EXTRA_ARGS - Extra arguments to pass to "commsdsl2comms"
# COMMSDSL2TEST_EXTRA_ARGS - Extra arguments to pass to "commsdsl2test"
# COMMSDSL2TOOLS_QT_EXTRA_ARGS - Extra arguments to pass to "commsdsl2tools_qt"
# COMMSDSL2SWIG_EXTRA_ARGS - Extra arguments to pass to "commsdsl2swig"
# COMMSDSL2EMSCRIPTEN_EXTRA_ARGS - Extra arguments to pass to "commsdsl2emscripten"

set (UBLOX_VERSION "2.9")
set (UBLOX_MIN_COMMSDSL_VERSION "6.3.4")

if (("${CMAKE_VERSION}" VERSION_GREATER_EQUAL "3.30") AND
    (NOT DEFINED CMAKE_POLICY_DEFAULT_CMP0167))
    # Find boost cmake configuration from the boost installation
    cmake_policy(SET CMP0167 NEW)
endif ()

set (EXTERNALS_DIR "${PROJECT_SOURCE_DIR}/externals")

set (PROT_OUTPUT_TGT "prot_output_tgt")

if ("${UBLOX_PROT_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_PROT_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output")
endif ()

if ("${UBLOX_TEST_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_TEST_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output_test")
endif ()

if ("${UBLOX_TOOLS_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_TOOLS_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output_tools")
endif ()

if ("${UBLOX_SWIG_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_SWIG_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output_swig")
endif ()

if ("${UBLOX_SWIG_SRC_DIR}" STREQUAL "")
    set (UBLOX_SWIG_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/swig)
endif ()

if ("${UBLOX_SWIG_LANGUAGES}" STREQUAL "")
    set (UBLOX_SWIG_LANGUAGES python java csharp)
endif ()

if ("${UBLOX_EMSCRIPTEN_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_EMSCRIPTEN_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output_emscripten")
endif ()

if ("${UBLOX_SCHEMA_FILES_LIST_FILE}" STREQUAL "")
    set (schema_files
        dsl/main.xml
        dsl/field/common.xml
        dsl/field/cfgval.xml
        dsl/message/NavPosecef.xml
        dsl/message/NavPosllh.xml
        dsl/message/NavStatus.xml
        dsl/message/NavDop.xml
        dsl/message/NavAtt.xml
        dsl/message/NavSol.xml
        dsl/message/NavPvt.xml
        dsl/message/NavOdo.xml
        dsl/message/NavResetodo.xml
        dsl/message/NavVelecef.xml
        dsl/message/NavVelned.xml
        dsl/message/NavHpposecef.xml
        dsl/message/NavHpposllh.xml
        dsl/message/NavTimegps.xml
        dsl/message/NavTimeutc.xml
        dsl/message/NavClock.xml
        dsl/message/NavTimeglo.xml
        dsl/message/NavTimebds.xml
        dsl/message/NavTimegal.xml
        dsl/message/NavTimels.xml
        dsl/message/NavSvinfo.xml
        dsl/message/NavDgps.xml
        dsl/message/NavSbas.xml
        dsl/message/NavOrb.xml
        dsl/message/NavSat.xml
        dsl/message/NavGeofence.xml
        dsl/message/NavSvin.xml
        dsl/message/NavRelposned.xml
        dsl/message/NavSlas.xml
        dsl/message/NavSig.xml
        dsl/message/NavAopstatus.xml
        dsl/message/NavEoe.xml
        dsl/message/RxmRaw.xml
        dsl/message/RxmSfrb.xml
        dsl/message/RxmSfrbx.xml
        dsl/message/RxmMeasx.xml
        dsl/message/RxmRawx.xml
        dsl/message/RxmSvsi.xml
        dsl/message/RxmAlm.xml
        dsl/message/RxmEph.xml
        dsl/message/RxmRtcm.xml
        dsl/message/RxmPmreq.xml
        dsl/message/RxmRlm.xml
        dsl/message/RxmImes.xml
        dsl/message/Inf.xml
        dsl/message/Ack.xml
        dsl/message/CfgPrt.xml
        dsl/message/CfgMsg.xml
        dsl/message/CfgInf.xml
        dsl/message/CfgRst.xml
        dsl/message/CfgDat.xml
        dsl/message/CfgTp.xml
        dsl/message/CfgRate.xml
        dsl/message/CfgCfg.xml
        dsl/message/CfgFxn.xml
        dsl/message/CfgRxm.xml
        dsl/message/CfgEkf.xml
        dsl/message/CfgAnt.xml
        dsl/message/CfgSbas.xml
        dsl/message/CfgNmea.xml
        dsl/message/CfgUsb.xml
        dsl/message/CfgTmode.xml
        dsl/message/CfgOdo.xml
        dsl/message/CfgNvs.xml
        dsl/message/CfgNavx5.xml
        dsl/message/CfgNav5.xml
        dsl/message/CfgTp5.xml
        dsl/message/CfgPm.xml
        dsl/message/CfgRinv.xml
        dsl/message/CfgItfm.xml
        dsl/message/CfgPm2.xml
        dsl/message/CfgTmode2.xml
        dsl/message/CfgGnss.xml
        dsl/message/CfgLogfilter.xml
        dsl/message/CfgTxslot.xml
        dsl/message/CfgPwr.xml
        dsl/message/CfgHnr.xml
        dsl/message/CfgEsrc.xml
        dsl/message/CfgDosc.xml
        dsl/message/CfgSmgr.xml
        dsl/message/CfgGeofence.xml
        dsl/message/CfgDgnss.xml
        dsl/message/CfgTmode3.xml
        dsl/message/CfgFixseed.xml
        dsl/message/CfgPms.xml
        dsl/message/CfgValset.xml
        dsl/message/CfgValget.xml
        dsl/message/CfgValdel.xml
        dsl/message/UpdSos.xml
        dsl/message/MonIo.xml
        dsl/message/MonVer.xml
        dsl/message/MonMsgpp.xml
        dsl/message/MonRxbuf.xml
        dsl/message/MonTxbuf.xml
        dsl/message/MonHw.xml
        dsl/message/MonHw2.xml
        dsl/message/MonRxr.xml
        dsl/message/MonPatch.xml
        dsl/message/MonGnss.xml
        dsl/message/MonSmgr.xml
        dsl/message/MonSpan.xml
        dsl/message/MonComms.xml
        dsl/message/MonHw3.xml
        dsl/message/MonRf.xml
        dsl/message/AidReq.xml
        dsl/message/AidIni.xml
        dsl/message/AidHui.xml
        dsl/message/AidData.xml
        dsl/message/AidAlm.xml
        dsl/message/AidEph.xml
        dsl/message/AidAlpsrv.xml
        dsl/message/AidAop.xml
        dsl/message/AidAlp.xml
        dsl/message/TimTp.xml
        dsl/message/TimTm2.xml
        dsl/message/TimSvin.xml
        dsl/message/TimVrfy.xml
        dsl/message/TimDosc.xml
        dsl/message/TimTos.xml
        dsl/message/TimSmeas.xml
        dsl/message/TimVcocal.xml
        dsl/message/TimFchg.xml
        dsl/message/EsfMeas.xml
        dsl/message/EsfRaw.xml
        dsl/message/EsfStatus.xml
        dsl/message/EsfIns.xml
        dsl/message/MgaGps.xml
        dsl/message/MgaGal.xml
        dsl/message/MgaBds.xml
        dsl/message/MgaQzss.xml
        dsl/message/MgaGlo.xml
        dsl/message/MgaAno.xml
        dsl/message/MgaFlash.xml
        dsl/message/MgaIni.xml
        dsl/message/MgaAck.xml
        dsl/message/MgaDbd.xml
        dsl/message/LogErase.xml
        dsl/message/LogString.xml
        dsl/message/LogCreate.xml
        dsl/message/LogInfo.xml
        dsl/message/LogRetrieve.xml
        dsl/message/LogRetrievepos.xml
        dsl/message/LogRetrievestring.xml
        dsl/message/LogFindtime.xml
        dsl/message/LogRetrieveposextra.xml
        dsl/message/LogRetrievebatch.xml
        dsl/message/LogBatch.xml
        dsl/message/SecSign.xml
        dsl/message/SecUniqid.xml
        dsl/message/HnrPvt.xml
    )

    string(REPLACE ";" "\n" schema_files_str "${schema_files}")
    set (UBLOX_SCHEMA_FILES_LIST_FILE "${CMAKE_BINARY_DIR}/schema_files.txt")
    file(WRITE ${UBLOX_SCHEMA_FILES_LIST_FILE} "${schema_files_str}")
endif ()


set (prot_tmp_dir "${CMAKE_BINARY_DIR}/output.tmp")
set (test_tmp_dir "${CMAKE_BINARY_DIR}/output_test.tmp")
set (tools_tmp_dir "${CMAKE_BINARY_DIR}/output_tools.tmp")

if ("${UBLOX_PROT_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_PROT_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output")
endif ()

if ("${UBLOX_TEST_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_TEST_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output_test")
endif ()

if ("${UBLOX_TOOLS_OUTPUT_DIR}" STREQUAL "")
    set (UBLOX_TOOLS_OUTPUT_DIR "${CMAKE_BINARY_DIR}/output_tools")
endif ()

set (warn_as_error "--warn-as-err")
if (UBLOX_NO_WARN_AS_ERR)
    set (warn_as_error)
endif ()

include (ExternalProject)
if (UBLOX_GEN_PROTOCOL)
    find_program(COMMSDSL2COMMS commsdsl2comms PATH_SUFFIXES bin REQUIRED)        
    execute_process(COMMAND "${COMMSDSL2COMMS}" --version OUTPUT_VARIABLE commsdsl2comms_version)
    if ("${commsdsl2comms_version}" VERSION_LESS "${UBLOX_MIN_COMMSDSL_VERSION}")
        message (FATAL_ERROR "Version of commsdsl2comms is too old, required minimum is v${UBLOX_MIN_COMMSDSL_VERSION}.")
    endif ()

    set (prot_tmp_dir "${CMAKE_BINARY_DIR}/output.tmp")

    add_custom_target(rm_prot_tmp_tgt
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${prot_tmp_dir}
    )

    add_custom_command(
        OUTPUT ${prot_tmp_dir}
        DEPENDS ${schema_files} ${src_files} rm_prot_tmp_tgt
        COMMAND ${COMMSDSL2COMMS} ${warn_as_error} -V ${UBLOX_VERSION}
            -o ${prot_tmp_dir} -c ${PROJECT_SOURCE_DIR}/src/protocol
            -p ${PROJECT_SOURCE_DIR} -i ${UBLOX_SCHEMA_FILES_LIST_FILE} 
            ${COMMSDSL2COMMS_EXTRA_ARGS} 
    )

    add_custom_target(${PROT_OUTPUT_TGT} ALL
        COMMAND ${CMAKE_COMMAND}
            -DGENERATED="${prot_tmp_dir}" -DOUTPUT="${UBLOX_PROT_OUTPUT_DIR}"
            -P "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake"
        DEPENDS ${prot_tmp_dir} ${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake ${schema_files})

    if (UBLOX_BUILD_PROTOCOL)
        execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory ${UBLOX_PROT_OUTPUT_DIR}
        )  

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${UBLOX_PROT_OUTPUT_DIR}/dummy.txt
        )

        set (prot_build_dir ${CMAKE_CURRENT_BINARY_DIR}/prot_tgt_build)
        ExternalProject_Add(
            "prot_tgt"
            BUILD_ALWAYS TRUE
            DEPENDS ${PROT_OUTPUT_TGT}
            SOURCE_DIR ${UBLOX_PROT_OUTPUT_DIR}
            BINARY_DIR ${prot_build_dir}
            INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
            CMAKE_ARGS
                -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                -DCMAKE_GENERATOR=${CMAKE_GENERATOR} -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
                -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}           
                -DOPT_REQUIRE_COMMS_LIB=OFF
                -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
        )

        find_package(Doxygen)
        if (UBLOX_BUILD_PROT_DOC AND DOXYGEN_FOUND)
            ExternalProject_Add_Step(
                "prot_tgt" 
                "doc"
                COMMAND ${CMAKE_COMMAND} --build ${prot_build_dir} --target doc_cc_ublox
                DEPENDEES "build"
                DEPENDERS "install"
            )
        endif ()
    endif ()
endif ()  

set (combined_prefix_path ${CMAKE_INSTALL_PREFIX} ${CMAKE_PREFIX_PATH})
string (REPLACE ";" "|" combined_prefix_path_str "${combined_prefix_path}")

if (UBLOX_GEN_TEST)
    find_program(COMMSDSL2TEST commsdsl2test PATH_SUFFIXES bin REQUIRED)        
    execute_process(COMMAND "${COMMSDSL2TEST}" --version OUTPUT_VARIABLE commsdsl2test_version)
    if ("${commsdsl2test_version}" VERSION_LESS "${UBLOX_MIN_COMMSDSL_VERSION}")
        message (FATAL_ERROR "Version of commsdsl2test is too old, required minimum is v${UBLOX_MIN_COMMSDSL_VERSION}.")
    endif ()    

    set (test_tmp_dir "${CMAKE_BINARY_DIR}/output_test.tmp")

    add_custom_target(rm_test_tmp_tgt
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${test_tmp_dir}
    )

    add_custom_command(
        OUTPUT ${test_tmp_dir}
        DEPENDS ${schema_files} ${src_files} rm_test_tmp_tgt
        COMMAND ${COMMSDSL2TEST} ${warn_as_error} ${COMMSDSL2TEST_EXTRA_ARGS}
            -o ${test_tmp_dir} -c ${PROJECT_SOURCE_DIR}/src/test
            -p ${PROJECT_SOURCE_DIR} -i ${UBLOX_SCHEMA_FILES_LIST_FILE} 
    )

    add_custom_target("test_output_tgt" ALL
        COMMAND ${CMAKE_COMMAND}
            -DGENERATED="${test_tmp_dir}" -DOUTPUT="${UBLOX_TEST_OUTPUT_DIR}"
            -P "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake"        
        DEPENDS ${test_tmp_dir} "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake" ${schema_files})

    if (UBLOX_BUILD_TEST)
        if ((NOT UBLOX_GEN_PROTOCOL) OR (NOT UBLOX_BUILD_PROTOCOL))
            message (FATAL_ERROR "UBLOX_GEN_PROTOCOL and UBLOX_BUILD_PROTOCOL are required for UBLOX_BUILD_TEST")
        endif ()
            
        execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory ${UBLOX_TEST_OUTPUT_DIR}
        )

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${UBLOX_TEST_OUTPUT_DIR}/dummy.txt
        )

        set (test_build_dir ${CMAKE_CURRENT_BINARY_DIR}/test_tgt_build)
        ExternalProject_Add(
            "test_tgt"
            BUILD_ALWAYS TRUE
            DEPENDS "prot_tgt" "test_output_tgt"
            SOURCE_DIR ${UBLOX_TEST_OUTPUT_DIR}
            BINARY_DIR ${test_build_dir}
            LIST_SEPARATOR |
            CMAKE_ARGS
                -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                -DCMAKE_GENERATOR=${CMAKE_GENERATOR} -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
                -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}           
                -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
                -DCMAKE_PREFIX_PATH=${combined_prefix_path_str}
                -DOPT_TEST_OPTIONS=cc_ublox::options::AllMessagesDynMemMsgFactoryDefaultOptions
                -DOPT_USE_CCACHE=${UBLOX_USE_CCACHE}
                -DOPT_CCACHE_EXECUTABLE=${UBLOX_CCACHE_EXECUTABLE}  
        )   
    endif ()
endif ()


if (UBLOX_GEN_TOOLS)
    find_program(COMMSDSL2TOOLS_QT commsdsl2tools_qt PATH_SUFFIXES bin REQUIRED)    
    execute_process(COMMAND "${COMMSDSL2TOOLS_QT}" --version OUTPUT_VARIABLE commsdsl2tools_qt_version)
    if ("${commsdsl2tools_qt_version}" VERSION_LESS "${UBLOX_MIN_COMMSDSL_VERSION}")
        message (FATAL_ERROR "Version of commsdsl2tools_qt is too old, required minimum is v${UBLOX_MIN_COMMSDSL_VERSION}.")
    endif ()    

    set (tools_tmp_dir "${CMAKE_BINARY_DIR}/output_tools.tmp")

    add_custom_target(rm_tools_tmp_tgt
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${tools_tmp_dir}
    )

    add_custom_command(
        OUTPUT ${tools_tmp_dir}
        DEPENDS ${schema_files} ${src_files} rm_tools_tmp_tgt
        COMMAND ${COMMSDSL2TOOLS_QT} ${warn_as_error} ${COMMSDSL2TOOLS_QT_EXTRA_ARGS}
            --protocol "::CC UBLOX:UBX protocol used by the U-blox GNSS Receivers.:cc.UbloxProtocolPlugin"
            -o ${tools_tmp_dir}  -c ${PROJECT_SOURCE_DIR}/src/tools
            -p ${PROJECT_SOURCE_DIR} -i ${UBLOX_SCHEMA_FILES_LIST_FILE} 
    )

    add_custom_target("tools_output_tgt" ALL
        COMMAND ${CMAKE_COMMAND}
            -DGENERATED="${tools_tmp_dir}" -DOUTPUT="${UBLOX_TOOLS_OUTPUT_DIR}"
            -P "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake"        
        DEPENDS ${tools_tmp_dir} "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake" ${schema_files})

    if (UBLOX_BUILD_TOOLS)
        if ((NOT UBLOX_GEN_PROTOCOL) OR (NOT UBLOX_BUILD_PROTOCOL))
            message (FATAL_ERROR "UBLOX_GEN_PROTOCOL and UBLOX_BUILD_PROTOCOL are required for UBLOX_BUILD_TOOLS")
        endif ()
            
        execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory ${UBLOX_TOOLS_OUTPUT_DIR}
        )    

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${UBLOX_TOOLS_OUTPUT_DIR}/dummy.txt
        )

        set (tools_build_dir ${CMAKE_CURRENT_BINARY_DIR}/tools_tgt_build)
        ExternalProject_Add(
            "tools_tgt"
            BUILD_ALWAYS TRUE
            DEPENDS "prot_tgt" "tools_output_tgt"
            SOURCE_DIR ${UBLOX_TOOLS_OUTPUT_DIR}
            BINARY_DIR ${tools_build_dir}
            LIST_SEPARATOR |
            CMAKE_ARGS
                -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                -DCMAKE_GENERATOR=${CMAKE_GENERATOR} -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
                -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}           
                -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
                -DCMAKE_PREFIX_PATH=${combined_prefix_path_str}
                -DOPT_QT_MAJOR_VERSION=${UBLOX_TOOLS_QT_VER}
                -DOPT_USE_CCACHE=${UBLOX_USE_CCACHE}
                -DOPT_CCACHE_EXECUTABLE=${UBLOX_CCACHE_EXECUTABLE}  
        )  
    endif ()
endif ()

if (UBLOX_GEN_SWIG)
    find_program(COMMSDSL2SWIG commsdsl2swig PATH_SUFFIXES bin REQUIRED)    
    execute_process(COMMAND "${COMMSDSL2SWIG}" --version OUTPUT_VARIABLE commsdsl2swig_version)
    if ("${commsdsl2swig_version}" VERSION_LESS "${UBLOX_MIN_COMMSDSL_VERSION}")
        message (FATAL_ERROR "Version of commsdsl2swig is too old, required minimum is v${UBLOX_MIN_COMMSDSL_VERSION}.")
    endif ()      

    set (swig_tmp_dir "${CMAKE_BINARY_DIR}/output_swig.tmp")

    add_custom_target(rm_swig_tmp_tgt
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${swig_tmp_dir}
    )

    add_custom_command(
        OUTPUT ${swig_tmp_dir}
        DEPENDS ${schema_files} ${src_files} rm_swig_tmp_tgt
        COMMAND ${COMMSDSL2SWIG} ${warn_as_error} ${COMMSDSL2SWIG_EXTRA_ARGS}
            -c ${UBLOX_SWIG_SRC_DIR} -o ${swig_tmp_dir} 
            -p ${PROJECT_SOURCE_DIR} -i ${UBLOX_SCHEMA_FILES_LIST_FILE} 
    )

    add_custom_target("swig_output_tgt" ALL
        COMMAND ${CMAKE_COMMAND}
            -DGENERATED="${swig_tmp_dir}" -DOUTPUT="${UBLOX_SWIG_OUTPUT_DIR}"
            -P "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake"        
        DEPENDS ${swig_tmp_dir} "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake" ${schema_files})

    if (UBLOX_BUILD_SWIG)
        if ((NOT UBLOX_GEN_PROTOCOL) OR (NOT UBLOX_BUILD_PROTOCOL))
            message (FATAL_ERROR "UBLOX_GEN_PROTOCOL and UBLOX_BUILD_PROTOCOL are required for UBLOX_BUILD_SWIG")
        endif ()

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory ${UBLOX_SWIG_OUTPUT_DIR}
        )    

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${UBLOX_SWIG_OUTPUT_DIR}/dummy.txt
        )

        string (REPLACE ";" "|" combined_languages_str "${UBLOX_SWIG_LANGUAGES}")

        set (swig_build_dir ${CMAKE_CURRENT_BINARY_DIR}/swig_tgt_build)
        ExternalProject_Add(
            "swig_tgt"
            BUILD_ALWAYS TRUE
            DEPENDS "prot_tgt" "swig_output_tgt"
            SOURCE_DIR ${UBLOX_SWIG_OUTPUT_DIR}
            BINARY_DIR ${swig_build_dir}
            LIST_SEPARATOR |
            CMAKE_ARGS
                -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
                -DCMAKE_GENERATOR=${CMAKE_GENERATOR} -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
                -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}        
                -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
                -DCMAKE_PREFIX_PATH=${combined_prefix_path_str}
                -DOPT_SWIG_LANGUAGES=${combined_languages_str}
                -DOPT_USE_CCACHE=${UBLOX_USE_CCACHE}
                -DOPT_CCACHE_EXECUTABLE=${UBLOX_CCACHE_EXECUTABLE}  
            INSTALL_COMMAND
                ${CMAKE_COMMAND} -E echo "Skipping install"            
        )   
    endif ()
endif ()

if (UBLOX_GEN_EMSCRIPTEN)
    find_program(COMMSDSL2EMSCRIPTEN commsdsl2emscripten PATH_SUFFIXES bin REQUIRED)    
    find_program(EMCMAKE_EXECUTABLE emcmake REQUIRED)    
    execute_process(COMMAND "${COMMSDSL2EMSCRIPTEN}" --version OUTPUT_VARIABLE commsdsl2emscripten_version)
    if ("${commsdsl2emscripten_version}" VERSION_LESS "${UBLOX_MIN_COMMSDSL_VERSION}")
        message (FATAL_ERROR "Version of commsdsl2emscripten is too old, required minimum is v${UBLOX_MIN_COMMSDSL_VERSION}.")
    endif ()    

    set (emscripten_tmp_dir "${CMAKE_BINARY_DIR}/output_emscripten.tmp")

    add_custom_target(rm_emscripten_tmp_tgt
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${emscripten_tmp_dir}
    )

    add_custom_command(
        OUTPUT ${emscripten_tmp_dir}
        DEPENDS ${schema_files} ${src_files} rm_emscripten_tmp_tgt
        COMMAND ${COMMSDSL2EMSCRIPTEN} ${warn_as_error} ${COMMSDSL2EMSCRIPTEN_EXTRA_ARGS}
            -o ${emscripten_tmp_dir} -c ${PROJECT_SOURCE_DIR}/src/emscripten
            -p ${PROJECT_SOURCE_DIR} -i ${UBLOX_SCHEMA_FILES_LIST_FILE} 
    )

    add_custom_target("emscripten_output_tgt" ALL
        COMMAND ${CMAKE_COMMAND}
            -DGENERATED="${emscripten_tmp_dir}" -DOUTPUT="${UBLOX_EMSCRIPTEN_OUTPUT_DIR}"
            -P "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake"        
        DEPENDS ${emscripten_tmp_dir} "${CMAKE_CURRENT_LIST_DIR}/CopyGenerated.cmake" ${schema_files})

    if (UBLOX_BUILD_EMSCRIPTEN)
        if ((NOT UBLOX_GEN_PROTOCOL) OR (NOT UBLOX_BUILD_PROTOCOL))
            message (FATAL_ERROR "UBLOX_GEN_PROTOCOL and UBLOX_BUILD_PROTOCOL are required for UBLOX_BUILD_EMSCRIPTEN")
        endif ()
            
        execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory ${UBLOX_EMSCRIPTEN_OUTPUT_DIR}
        )    

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${UBLOX_EMSCRIPTEN_OUTPUT_DIR}/dummy.txt
        )

        find_package(LibComms REQUIRED)
        get_target_property(comms_include_dirs cc::comms INTERFACE_INCLUDE_DIRECTORIES)
        set (prot_include_dir "${CMAKE_INSTALL_PREFIX}/include")
        set (extra_includes_path ${prot_include_dir} ${comms_include_dirs})
        string (REPLACE ";" "|" extra_includes_path_str "${extra_includes_path}")    


        set (emscripten_build_dir ${CMAKE_CURRENT_BINARY_DIR}/emscripten_tgt_build)
        ExternalProject_Add(
            "emscripten_tgt"
            BUILD_ALWAYS TRUE
            DEPENDS "prot_tgt" "emscripten_output_tgt"
            SOURCE_DIR ${UBLOX_EMSCRIPTEN_OUTPUT_DIR}
            BINARY_DIR ${emscripten_build_dir}
            CMAKE_COMMAND ${EMCMAKE_EXECUTABLE} ${CMAKE_COMMAND}
            LIST_SEPARATOR |
            CMAKE_ARGS
                -DCMAKE_GENERATOR=${CMAKE_GENERATOR} -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} 
                -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
                -DOPT_MODULARIZE=ON
                -DOPT_EXTRA_INCLUDE_DIRS=${extra_includes_path_str}
                -DOPT_USE_CCACHE=${UBLOX_USE_CCACHE}
                -DOPT_CCACHE_EXECUTABLE=${UBLOX_CCACHE_EXECUTABLE}  
        )   
    endif ()
endif ()

if (NOT UBLOX_BUILD_EXAMPLES)
    return()
endif()

add_subdirectory (examples)
